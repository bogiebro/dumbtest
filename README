DumbTest
========

DumbTest is a dead simple test framework in under 100 lines of bash. Your
tests must be in a directory named 'tests' or subdirectories within 'tests'.
Running `dumbtest` within the 'tests' directory will do the following:

- Create the directory 'test_build' as a sibling of the 'tests' directory.
- Search subdirectories of PROJ/tests for files ending in $SRC_EXT.
- If $COMPILER is defined, run $COMPILER on each file. Generated files should
  have the same base name, with extension given by $TARGET_EXT.
- Run $INTERPRETER on each compiled file (or source file if $COMPILER was
  unspecified) If $INTERPRETER is unspecified, the file itself is run as an
  executable.
- Continously print test failures to stderr, logging these results to
  the file 'test_build/INFO'.

A test fails if any of the following occur:
- The stdout produced by compiling FILENAME is not equal to the contents of
  FILENAME.compile.stdout (if it exists).
- The stderr produced by compiling FILENAME is not equal to the contents of
  FILENAME.compile.stderr (if it exists).
- The exit status after compiling FILENAME is not equal to the contents of
  FILENAME.compile.status (if it exists) or is non-zero (if it doesn't).
- The stdout produced by running FILENAME is not equal to the contents of
  FILENAME.stdout (if it exists).
- The stderr produced by running FILENAME is not equal to the contents of
  FILENAME.stderr (if it exists). 
- The exit status after running FILENAME is not equal to the contents of
  FILENAME.status (if it exists).
- The contents of FILENAME.generated.{stdout,stderr,status} (if created while
  compiling or running FILENAME) does not equal the {stdout, stderr, exit
  status} produced when running FILENAME.

Files named within the $PROJ/tests directory will be
executed with `source`. This is a good place write variable declarations.
These bindings will affect all tests within the directory immediately
containing the CONFIG file.

`dumbtest` can be invoked with a directory argument (to run all tests within
that directory), a file argument (to run that test alone), or no argument
(which runs the tests in the current directory).  Directories containing a file
named DISABLED will not be tested unless passed explicitly as an argument to
`dumbtest`.

The following environment variables affect `dumbtest` behavior. 
- COMPILER is the program used on source files before running them. If
  undefined, no compilation will occur.
- INTERPRETER is the program used to run source or compiled files. If
  undefined, compiled files will be run using `eval`.
- SRC_EXT is the required ending for all files being tested. If undefined,
  all files will be tested.
- TARGET_EXT should be the ending for files generated by COMPILER.
- TIMEOUT should be a program that runs its argument, but kills it after
  an unreasonable amount of time. If undefined, no timeouts occur.
- DIFF is the program to use to compare expected values to produced values.
  By default, this is 'diff -wy --suppress-common-lines'. 
- TAIL is the program to use to print the contents of a file along with
  its name. By default, this is 'tail -v -n +1'. `gtail` will be used if 
  `tail` does not support the -v flag (for Homebrew users). 
- If VERBOSE is set, the user is notified that a test occurred for each
  file tested, regardless of the exit status. 

An example file hierarchy is shown below:

PROJ/CONFIG
PROJ/tests/SimpleTests/outtest.c
PROJ/tests/SimpleTests/outtest.stdout
PROJ/tests/SimpleTests/statustest.c
PROJ/tests/SimpleTests/statustest.status
PROJ/tests/AdvancedTests/errtest.c
PROJ/tests/AdvancedTests/errtest.stderr
PROJ/tests/OpenBugs/DISABLED
PROJ/tests/OpenBugs/trac4097.c

This test directory contains three tests: outtest, which is expected to have
stdout given by outtest.stdout, statustest, which is expected to have exit
status given by statustest.status, and errtest, which is expected to have
stderr given by errtest.stderr. The tests in OpenBugs will not be run be
default, due to the DISABLED file, but trac4097 can be run with `dumbtest
OpenBugs` or `dumbtest OpenBugs/trac4097.c`.  A plausable configuration file
might look like this:

COMPILER=gcc
SRC_EXT=.c
TARGET_EXT=.out
TIMEOUT="timeout 5"

This framework also fascilitates random testing. If you have an implementation
of some functionality you want to test, as well as a known-good implementation
of the same functionality, you can set INTERPRETER to be a wrapper script that
generates a series of random inputs and feeds them to both programs. The
outputs of the known good program should be redirected to
FILENAME.generated.{stdout,stderr,status}, depending on what you want verified. 
